{
    "project_summary": "Project: Graph-to-C++ visual programming system.\nStatus: IR schema defined; sample IR files created (examples/hello_world.graph.json, add.graph.json, function.graph.json). Implementations added:\n- TypeScript CppEmitter (src/emitter/cppEmitter.ts) with node emitters for Const, Add, Sub, Mul, Div, Mod, comparisons, Print, VarSet/VarGet, Return, If, CallFunction; plugin loader supports plugins/*.json (e.g., plugins/sin.json).\n- Simple JS emitters (scripts/emit_simple.js, scripts/emit_with_functions.js) for quick prototyping.\n- Validator (src/validator/graphValidator.ts): cycle detection and port-type checks.\n- JS Runner (src/runner/jsRunner.ts) for previewing graphs without compiling.\n- Frontend skeleton (frontend/src/components/GraphEditor.tsx, NodePalette.tsx) with export/import.\n- README.md, FEATURES.md, docs/IR_SCHEMA.md, package.json, tsconfig.json.\nWork completed: Hello World and Add examples emit correctly; emitter can load plugins and emit includes; functions/subgraph emitter basics present in scripts; many node emitters implemented.\nNext recommended tasks (priority list):\n1) Integrate react-flow frontend and wire live validation/export to emitter (1-2 weeks).\n2) Implement full subgraph->C++ function codegen with argument/return mapping and tests (3-7 days).\n3) Implement server-side sandbox (Docker) compile-and-run service (1-2 weeks).\n4) Implement WASM/Emscripten pipeline for client-side execution (1-3 weeks).\nOther: IR optimizer (constant folding, dead node elimination), stronger validator, JS runner debugger, AST-based emitter refactor.\nNotes: Current emitter uses string-based emission; recommend moving to AST for complex control flow. Plugins should be sandboxed for server-side compilation.\n",
    "brainstorm_features": "Proposed features for Graph-to-C++ project:\n\nCategories:\n- Editor / UX: palette, search, multi-select, collapse/group, subgraph as nodes, inspector, live preview, real-time type inference, auto-layout, mini-map, collaborative editing, undo/redo, keyboard shortcuts, themes, localization\n- Language & IR: richer type system (structs, arrays, templates), generics, enums, tuples, optional types, user-defined types, type inference, polymorphism, pattern matching\n- Nodes & Control Flow: for, while, switch, try/catch, events, async/await (coroutines), map/filter/reduce, iterator nodes, error handling, pipeline nodes\n- Functions & Modules: proper subgraph->C++ function emission with args/returns, recursion support, function overloading, visibility, private/public nodes, module imports, library manifests\n- Compiler & Optimizer: AST-based emitter, source maps node->line, constant folding, dead-code elimination, inlining, loop unrolling, vectorization, type-specialization, incremental compilation & caching\n- Execution Backends: server-side sandbox (Docker) compile-and-run API, Emscripten WASM pipeline for client-side execution, cross-compile targets, embedded/IoT toolchains\n- Plugins & Libraries: plugin marketplace, secure plugin manifests, automatic include/link configuration, versioning, dependency resolution, wrappers for C++ libraries, binders for third-party libs\n- Runtime & Debugging: JS graph runner, step-through debugger, breakpoints, watch expressions, runtime traces mapped to nodes, performance profiling, throttling\n- Parallel & Distributed: schedule independent nodes concurrently (web workers/threads), data-parallel nodes (map), remote execution\n- Testing & CI: unit tests for emitter/validator, golden-tests for generated C++, fuzz test graphs, CI for plugin validation\n- Security & Sandbox: sanitize plugin inputs, server-side compilation sandboxing, resource limits, audit logging\n- Tooling & Integrations: VS Code extension, import/export (JSON, C++ snippets), Git integration, examples/tutorials, CLI tools\n\nPrioritization (short/medium/long term) and rough estimates included in full brainstorm.\n",
    "current_tasks": "Primary goal: Complete Graph-to-C++ system \u2014 full frontend, IR, compiler core, execution backends, plugin system, docs.\n\nCurrent status (short):\n- IR schema defined (docs/IR_SCHEMA.md).\n- Prototype emitters produce simple C++ (scripts/emit_simple.js, scripts/emit_with_functions.js).\n- TypeScript emitter (src/emitter/cppEmitter.ts) implements many node emitters and plugin loader; emits functions and a node->line map (basic).\n- Examples and plugins present (examples/, plugins/sin.json).\n- Frontend skeleton exists (frontend/*) but not fully wired.\n- Validator (src/validator) and JS Runner (src/runner) present for quick checks.\n\nOpen tasks / prioritization:\n1) Implement proper subgraph->C++ function codegen in TypeScript emitter (map Args/Returns to signature and body). (High priority)\n2) Wire frontend to emitter: POST graph JSON to backend emitter or run emitter client-side; show validation errors in UI. (High)\n3) Add server-side sandbox compile-and-run API (Docker + Node) for execution and error mapping. (High)\n4) Improve validator and add optimizer passes (constant folding, dead node elimination). (Medium)\n5) Add comprehensive tests and CI for emitter/validator, and improve plugin validation. (Medium)\n6) Implement WASM/Emscripten path (Optional/Stretch).\n\nFiles of interest to modify:\n- src/emitter/cppEmitter.ts (function emission, plugin handling, mapping)\n- frontend/src/components/* (UI wiring)\n- src/validator/graphValidator.ts (validation rules)\n- scripts/compile_and_map.js (integration testing)\n- scripts/emit_with_functions.js (reference simple emitter)\n\nSuggested immediate next action (pick one):\n- Implement Arg/Return mapping in src/emitter/cppEmitter.ts and re-run examples/function_call.graph.json to produce correct function signatures and maps.\n- OR: create a Dockerized compile-and-run Node service (basic API) and example client integration in frontend.\n\nNotes:\n- The emitter currently uses string concatenation; migrating to AST-based emission may be necessary later for complex control flow.\n- Plugins are JSON and loaded from plugins/; ensure their params and returns are respected when emitting calls.\n- Ensure node->line mapping accounts for includes and generated function text offsets.\n"
}